#!venv/bin/python3
import shellconfigparse as scp
import requests
import json
import os


# Not required, but used just in case
scp.selectFile('config.sh')

# Assign values from config
PI_UID = scp.parse('PI_UID')
VIDEOPATH = scp.parse('VIDEOPATH')
BUCKETURL = scp.parse('BUCKETURL')
JSONPATH = scp.parse('JSONPATH')
FULLURL = f'{BUCKETURL}{PI_UID}/'


def fetch(debug):
    """Downloads videos from AWS S3, given a list of videos

    Args:
        debug (boolean): prints useful information for debugging
    """
    # Download videos.json from the server
    download_file(f'{JSONPATH}', 'videos.json')

    # Read the data from videos.json
    with open('videos.json', 'r') as f:
        data = f.read()
        data = json.loads(data)

        videos = []
        for entry in data:
            videos.append(entry)

    # Download every video file from videos.json
    for video in videos:
        # Don't download if the file exists
        if os.path.exists(f'{VIDEOPATH}/{video}'):
            pass
        else:
            download_file(f'{VIDEOPATH}/{video}', video)
            if debug:
                os.system('clear')
                print(f'\nDownloading {video}...\n')

    # Delete all videos that are not in videos.json
    for file in os.listdir(VIDEOPATH):
        if file not in videos and file.endswith('.mp4'):
            os.remove(file)

    # Print debug information
    if debug:
        os.system('clear')
        print('\nFinished!\n')
        print('Files downloaded:')
        for video in videos:
            print(video)
        print('\n')


def download_file(file_path, file_name):
    """Downloads a file from the download link

    Args:
        file_path (string): path for the downloaded file
        file_name (string): the name of the file to be downloaded
    """
    response = requests.get(f'{FULLURL}{file_name}')

    if response.status_code == 200:
        with open(file_path, 'wb') as local_file:
            for chunk in response.iter_content(chunk_size=128):
                local_file.write(chunk)
    else:
        print(f'\nUnable to download\nStatus code: {response.status_code}\n')
        quit()


if __name__ == '__main__':
    fetch(debug=True)