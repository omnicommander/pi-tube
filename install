#!/usr/bin/env bash
# =================================
# sudo ./install
# =================================

clear

# Source config to access the variables
source config.sh

if [ "$EUID" -ne 0 ]
  then printf "Please run install with sudo!  sudo ./install "
  exit
fi

# go to root directory
cd /

# self-update
echo
while true; do
	read -p "Can I please run my self-update? (Y/n)" yn
    case $yn in
        [Yy]* ) apt update && apt dist-upgrade -y; break;;
        [Nn]* ) printf "\n Hey! I may not run correctly, so you had your chance and you blew it.\n"; break;;
        * ) apt update && apt dist-upgrade -y; break;;
    esac
done

echo

# test for jq
command -v jq >/dev/null 2>&1 || {
    printf >&2 "I require jq but it's not installed, so I am installing it now.\n";
    # install jq for the json
    apt-get install jq -y
}

# test for bc
command -v bc >/dev/null 2&1 || {
    printf >&2 "I require bc but it is not installed, so I am installing it now. \n";
    apt-get install bc -y
}

printf "*** Dependencies succesfully installed. Now installing configuration files ***\n";

echo
printf "Installing desktop configuration files...\n"
tar -xvf /home/pi/OC-DigitalSignage/config.tar
echo
printf "Installing Raspian boot configuration files...\n"
tar -xvf /home/pi/OC-DigitalSignage/booter.tar
echo

# ****** NO LONGER REQUIRED TO RUN AS ROOT ************
# printf "\n --- giving VLC access to run as sudo ---\n"
# sed -i 's/geteuid/getppid/' /usr/bin/vlc
# *****************************************************

# Begin user configuration session
#---------------------------------

while true; do
	read -p "Do you wish to set the PI_UID now? (Y/n)" yn
    case $yn in
        [Yy]* ) nano /home/pi/OC-DigitalSignage/config.sh; break;;
        [Nn]* ) printf "You can always edit the config.sh anytime.\nBye for now!"; break;;
        * ) nano /home/pi/OC-DigitalSignage/config.sh; break;;
    esac
done

# Configure WIFI SSID and Password (sudo)
printf
read -p "Enter WIFI SSID: " SSID
read -p "Enter WIFI PASSWORD: " PASSWORD

# overwrite existing wpa configuration file
printf "ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n" > /etc/wpa_supplicant/wpa_supplicant.conf
printf "update_config=1\n" >> /etc/wpa_supplicant/wpa_supplicant.conf
printf "country=\"US\"\n\n" >> /etc/wpa_supplicant/wpa_supplicant.conf
printf "network={\nssid=\"${SSID}\"\npsk=\"${PASSWORD}\"\nkey_mgmt=WPA-PSK\n}\n" >> /etc/wpa_supplicant/wpa_supplicant.conf

# turn off screen blanking and hide mouse cursor !!PERMANENT!!
# Needs to be under the [SeatDefault] section to work properly
printf "[Seat:*]\n" >> /etc/lightdm/lightdm.conf
printf "xserver-command=X -nocursor -s 0 -dpms\n" >> /etc/lightdm/lightdm.conf

# configure cron for boot to run as pi
# change to pi user for the following EOF
sudo -i -u pi bash << EOF
    # export current crontab to mycron
    crontab -l > mycron_old

    # write new mycron --
    # Fetch on boot timestamp to last_cron
    echo "@reboot /home/pi/OC-DigitalSignage/cronner && date +\%Y-\%m-\%d\ \%H:\%M:\%S > /home/pi/OC-DigitalSignage/last_cron" > mycron

    # Start looper on reboot
    echo "@reboot /home/pi/OC-DigitalSignage/looper" >> mycron

    # Every 6hrs fetch and timestamp to last_cron
    echo "* */6 * * * /usr/bin/python3 /home/pi/OC-DigitalSignage/cronner && date +\%Y-\%m-\%d\ \%H:\%M:\%S > /home/pi/OC-DigitalSignage/last_cron" >> mycron

    # Every 15min push heartbeat and timestamp to last_cron
    echo "*/15 * * * * /home/pi/OC-DigitalSignage/push && date +\%Y-\%m-\%d\ \%H:\%M:\%S > /home/pi/OC-DigitalSignage/last_cron" >> mycron

    # Every morning at 4am reboot
    echo "59 3 * * * sudo /sbin/shutdown -r now" >> mycron

    # install new cron file
    crontab mycron
    rm mycron
EOF

cd $PROJECTPATH

# Create venv and activate it
python3 -m venv venv
source venv/bin/activate

# Install all required modules
python3 -m pip install -r requirements.txt

# Makes the 'videos' directory
# Throws an error if it is not there
mkdir videos

# Run fetch once so it will play on reboot
./fetch

printf "Installation is now complete. Please reboot to begin use.\n"

# exit out
exit 0;